# Imports
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;
# import module_name::symbol;

# Extern declaration
# extern "cdecl" i32 extern_function_name();

# Global bariable 
#global u32 my_unsigned_global = 0; DO THIS LATER
#global u32 my_unsigned_global_without_a_value;
#
#struct MyType {
# u32 field1;
# i8 field2;
#}
#
#struct Empty {
#}

# Function definiton
fn main(i32 param) -> i32 {
  if param == 2 {
    # stuff
  } else {
    # stuff
  }

  if param == 4 {
    # stuff
  } else {
    # stuff
  }

  let namber: i32 = 0; 
  let exit: i32= 1;
  let yes: i32;

  # please implement expression statements thanks
  #yes = namber;
  #foo+bar;
  #test();
  #xiexie(1+gugu());

  while param == 1 {
    let namer: i32;
    if namer == 1 {
      exit + true;
    }
  }
}

fn poopshit(f32 a, f64 b) -> i64 {

}
